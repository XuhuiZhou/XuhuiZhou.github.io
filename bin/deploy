#!/usr/bin/env bash

# Run this script to deploy the app to Github Pages

# Parse cmd arguments

SRC_BRANCH="main"
DEPLOY_BRANCH="gh-pages"
CI_ENV=false

USAGE_MSG="usage: deploy [-h|--help] [-u|--user] [-s|--src SRC_BRANCH] [-d|--deploy DEPLOY_BRANCH] [--verbose] [--no-push] [--ci]"

while [[ $# > 0 ]]; do
    key="$1"

    case $key in
        -h|--help)
        echo $USAGE_MSG
        exit 0
        ;;
        -u|--user)
        ;;
        -s|--src)
        SRC_BRANCH="$2"
        shift
        ;;
        -d|--deploy)
        DEPLOY_BRANCH="$2"
        shift
        ;;
        --verbose)
        set -x
        ;;
        --no-push)
        NO_PUSH="--no-push"
        ;;
        --ci)
        CI_ENV=true
        ;;
        *)
        echo "Option $1 is unknown." >&2
        echo $USAGE_MSG >&2
        exit 1
        ;;
    esac
    shift
done

# Exit if any subcommand fails
set -e

echo "Deploying..."
echo "Source branch: $SRC_BRANCH"
echo "Deploy branch: $DEPLOY_BRANCH"

# Skip confirmation if running in CI environment or if GITHUB_ACTIONS is set
if [[ "$CI_ENV" != true && -z "$GITHUB_ACTIONS" ]]; then
    read -r -p "Do you want to proceed? [y/N] " response
    if [[ ! $response =~ ^([yY][eE][sS]|[yY])+$ ]]
    then
        echo "Aborting."
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
    fi
fi

# Check if there are any uncommitted changes
if [[ "$CI_ENV" != true && -z "$GITHUB_ACTIONS" ]]; then
    if ! git diff-index --quiet HEAD --; then
        echo "Changes to the following files are uncommitted:"
        git diff-index --name-only HEAD --
        echo "Please commit the changes before proceeding."
        echo "Aborting."
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
    fi

    # Check if there are any untracked files
    if ! test -z "$(git ls-files --exclude-standard --others)"; then
        echo "There are untracked files:"
        git ls-files --exclude-standard --others
        echo "Please commit those files or stash them before proceeding."
        echo "Aborting."
        [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
    fi
else
    echo "Running in CI environment, skipping uncommitted/untracked files check"
fi

# Switch to source branch (creates it if necessary from the current branch)
if [[ "$CI_ENV" == true || -n "$GITHUB_ACTIONS" ]]; then
    echo "Running in CI environment, using current branch as source"
    # In CI, we're already on the correct branch, so no need to switch
else
    if [ `git branch | grep $SRC_BRANCH | tr ' ' '\n' | tail -1` ]
    then
        git checkout $SRC_BRANCH
    else
        git checkout -b $SRC_BRANCH
    fi
fi

# Checkout DEPLOY_BRANCH branch
echo "Checking for existing deploy branch: $DEPLOY_BRANCH"
if git show-ref --verify --quiet refs/heads/$DEPLOY_BRANCH; then
  echo "Found existing deploy branch, deleting it"
  git branch -D $DEPLOY_BRANCH
else
  echo "No existing deploy branch found"
fi
echo "Creating new deploy branch"
git checkout -b $DEPLOY_BRANCH

# Export JEKYLL_ENV=production
export JEKYLL_ENV=production

# Build site
echo "Starting Jekyll build..."
echo "Ruby version: $(ruby -v)"
echo "Bundler version: $(bundle -v)"
echo "Jekyll version: $(bundle exec jekyll -v)"
echo "Gem environment:"
gem env
echo "Bundle environment:"
bundle env

# Try to build with different options if needed
if [[ "$CI_ENV" == true || -n "$GITHUB_ACTIONS" ]]; then
  echo "Running in CI environment, using extended build options"
  bundle exec jekyll build --lsi --trace || {
    echo "Jekyll build with trace failed!"
    echo "Attempting to build with safe mode..."
    bundle exec jekyll build --lsi --safe || {
      echo "Jekyll build with safe mode also failed!"
      echo "Attempting one last build with minimal options..."
      bundle exec jekyll build || {
        echo "All Jekyll build attempts failed!"
        exit 1
      }
    }
  }
else
  bundle exec jekyll build --lsi || {
    echo "Jekyll build failed!"
    echo "Attempting to build with trace for debugging..."
    bundle exec jekyll build --lsi --trace || {
      echo "Jekyll build with trace also failed!"
      exit 1
    }
  }
fi

# Delete and move files
find . -maxdepth 1 ! -name '_site' ! -name '.git' ! -name 'CNAME' ! -name '.gitignore' -exec rm -rf {} \;
mv _site/* .
rm -R _site/

# Create `.nojekyll` file (bypass GitHub Pages Jekyll processing)
touch .nojekyll

# Push to DEPLOY_BRANCH
git add -fA
git commit --allow-empty -m "$(git log -1 --pretty=%B) [ci skip]"
[[ ${NO_PUSH} ]] || git push -f -q origin $DEPLOY_BRANCH

# Move back to SRC_BRANCH
git checkout $SRC_BRANCH

echo "Deployed successfully!"

exit 0
